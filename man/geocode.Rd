% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geocode.R
\name{geocode}
\alias{geocode}
\title{Geocode}
\usage{
geocode(address, output = c("latlng", "latlngc", "latlnga", "all",
  "raw"), api = c("google", "baidu", "gaode"), ocs = c("WGS-84",
  "GCJ-02", "BD-09"), messaging = FALSE, time = 0, use_curl = TRUE,
  idf = TRUE, key = NULL, ...)
}
\arguments{
\item{address}{a character vector specifying the locations of interest (e.g.,
"Tsinghua Univeristy").}

\item{output}{character, either'latlng', 'latlngc', 'latlnga', 'all' or 'raw'. 
Default 'latlng'.
\itemize{
\item 'latlng': lat/lng coordinates with location type (Goolge Map) \cr
\item 'latlngc': lat/lng coordinates with location type (Goolge Map) | 
  confidence/precision (Baidu Map) \cr
\item 'latlnga': lat/lng coordinates with formated address and address 
 components (only available for Google and Gaode Map API) \cr
\item 'all': return all the information \cr
\item 'raw': return the raw data parsed from JSON by \code{\link[jsonlite]{fromJSON}()}.
 You will then need to parse the data on your own. Typically you can use
 \code{\link{parse_geocodes}()}
}}

\item{api}{character, the API to use ("google", "baidu" or "gaode"). Default 'google'.
When using Baidu or Gaode Maps API, the address must be in Chinese.}

\item{ocs}{output coordinate systems including 'WGS-84', 'GCJ-02' and 'BD-09', which
are the GCSs of Google Earth, Google Map in China and Baidu Map, respectively.
For address out of China, ocs is automatically set to 'WGS-84' and other values
are igored. Default 'WGS-84'.}

\item{messaging}{turn messaging on/off. Default FALSE.}

\item{time}{the time interval to geocode, in seconds. Default value is zero.
When you geocode multiple addresses, set a proper time interval to avoid
exceeding usage limits. For details see
\url{https://developers.google.com/maps/premium/usage-limits}}

\item{use_curl}{logical, whether use \code{curl} (TRUE) or \code{url} (FALSE)
to create the connection when calling the APIs. Default TRUE. The avialability 
of \code{curl} dependes on your network conditions.}

\item{idf}{logical, whether add an identifier column to the result . If
TRUE, \code{address} will be applied as an identifier column of the result 
data.frame. If FALSE, the identifier column will not be generated. You can also 
manually assign a vector as the identifier. Default TRUE.}

\item{key}{an api key must be provided when calling the Maps APIs. 
Default NULL, which indicates that the function will search for cache. If no
match is found, a GUI wizard will be launched to enter the api key. If the API
does not call for a key, set it to NA.}

\item{...}{other arguments to pass to the function, dependent on \code{api}. 
\describe{
 \item{\code{api} == 'google'}{\itemize{
  \item \code{client} and \code{signature}: (instead of \code{key}) for higher 
    security (if you have a premium account) \cr
  \item \code{region}: a character vector to restrain the scope for a better match.
    It will be expanded to fit the length of \code{address}. You need to refer
    to the API guide. \cr
  \item \code{components}: a formatted character vector to restrain the scope
    for a better match. It will be expanded to fit the length of \code{address}. 
    You need to refer to the API guide. \cr
  \item \code{name_type}: either 'long' or 'short' indicating long_name or 
    short_name is returned. Default 'long'. \cr
  \item \code{language}: the language in which to return results. Default 
   NULL (the native language).
 }}
 \item{\code{api} == 'baidu'}{\itemize{
  \item \code{city}: a valid Chinese city name to limit the search range
 }}
 \item{\code{api} == 'gaode'}{\itemize{
  \item \code{city}: a valid city character to limit the search range, accepts
   4 form: Chinaese city name, full pinyin (e.g., beijing), citycode (e.g., 010)
   or adcode (110000).
 }}
}}
}
\value{
a data.frame with variables lat/lng or more info
}
\description{
geocodes an address using Google, Baidu or Gaode Maps API. Note that in most cases by
using this function you are agreeing to the Google Maps API Terms of Service
at \url{https://cloud.google.com/maps-platform/terms/}, the Baidu Maps API Terms
of Use at \url{http://lbsyun.baidu.com/index.php?title=open/question} or the 
Gaode Maps API Terms of Use at \url{https://lbs.amap.com/faq/top/notice}. \cr
Note that geocoding service may cause charges. Take care of our app key and 
check the quota carefully.
}
\examples{
\dontrun{
set_api_key(c("google", "baidu", "gaode"), 
            c(<GOOGLE MAPS API KEY>, <BAIDU MAPS API KEY>,
              <GAODE MAPS API KEY>))

geocode('Tsinghua University', api='google', ocs='GCJ-02')
geocode('Tsinghua University', api='google', ocs='WGS-84',
        messaging=TRUE)
geocode('Beijing railway station', output='latlngc', api='google', 
        ocs='WGS-84')
geocode('Beijing railway station', output='latlnga', api='google', 
        ocs='WGS-84')
geocode(c('Tsinghua University', 'Beijing railway station'), api='google',
        ocs='GCJ-02')
geocode(c('Tsinghua University', 'Beijing railway station'), 
        output='latlngc', api='google', ocs='WGS-84', messaging=TRUE)
geocode(c('Tsinghua University', 'Beijing railway station'), 
        output='latlnga', api='google', ocs='WGS-84', messaging=TRUE)
geocode(c('Tsinghua University', 'Beijing railway station'), 
        output='latlngc', api='google', ocs='WGS-84', messaging=TRUE, 
        time=2)
geocode('Beijing railway station', api='baidu', ocs='BD-09')
geocode('Beijing railway station', api='baidu', ocs='GCJ-02', 
        messaging=TRUE)
geocode('Beijing railway station', output='latlngc', api='baidu', 
        ocs='BD-09')
geocode(c('Tsinghua University', 'Beijing railway station'), api='baidu',
        ocs='BD-09')
geocode(c('Tsinghua University', 'Beijing railway station'), 
        output='latlngc', api='baidu', ocs='WGS-84')
}
}
\references{
\itemize{
 \item Google Maps API guide: 
   \url{https://developers.google.com/maps/documentation/geocoding/start?csw=1} \cr
 \item Baidu Maps API guide: 
   \url{http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding} \cr
 \item Gaode (Amap) Map API guide: 
   \url{https://lbs.amap.com/api/webservice/guide/api/georegeo}
}
}
\seealso{
\code{\link{revgeocode}()}, \code{\link{set_api_key}()}, \code{\link{geohost}()},
 \code{\link{parse_geocodes}()}
}
\author{
\itemize{
 \item Creat: Jun Cai (\email{cai-j12@mails.tsinghua.edu.cn}), PhD student from
  Center for Earth System Science, Tsinghua University \cr
 \item Update: Yiying Wang (\email{wangy@aetna.com})
}
}
