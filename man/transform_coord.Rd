% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tranform_coord.R
\name{wgs_to_gcj}
\alias{wgs_to_gcj}
\alias{wgs2gcj}
\alias{gcj_to_wgs}
\alias{gcj2wgs}
\alias{gcj_to_bd}
\alias{gcj2bd}
\alias{bd_to_gcj}
\alias{bd2gcj}
\alias{wgs_to_bd}
\alias{wgs2bd}
\alias{bd_to_wgs}
\alias{bd2wgs}
\title{Transform coordinates from/to WGS-84, GCJ-02 and BD-09 locally}
\usage{
wgs_to_gcj(y, ..., force = FALSE, accurate_cn_bou = TRUE)

gcj_to_wgs(y, ..., force = FALSE, accurate_cn_bou = TRUE)

gcj_to_bd(y, ..., force = FALSE, accurate_cn_bou = TRUE)

bd_to_gcj(y, ..., force = FALSE, accurate_cn_bou = TRUE)

wgs_to_bd(y, ..., force = FALSE, accurate_cn_bou = TRUE)

bd_to_wgs(y, ..., force = FALSE, accurate_cn_bou = TRUE)
}
\arguments{
\item{y}{one of \itemize{
\item coordinate pair: a list of coordinate vectors \code{list(lat1, lon1)},
in which case you can provide other coordiante vectors in \code{...} \cr
\item latitude vector: latitude number(s), in which case you need to provice longitute
 number(s) in \code{...} \cr
\item coordinate matrix: a matrix (row 1-2 or col 1-2). The function will 
 choose how to read the data \cr
\item coordinate data.frame: a data.frame (col 1-2)
}}

\item{...}{one of \itemize{
\item coordinate pairs: when \code{y} is a list containing a coordinate pair 
 (e.g., \code{list(lat1, lon1)}), you can pass other coordinate pairs here 
 (e.g., \code{list(lat2, lon2), list(lat3, lon3), ...}). \cr
\item longitude vector: when \code{y} is only latitude vector, you can pass 
 \code{x} (longitude) here. \cr
\item when \code{y} is a coordinate matrix or data.frame, \code{...} is omitted.
}}

\item{force}{logical, whether convert the coordinates regardless if they
locate inside China. Default FALSE, indicating that only coordinates inside China
will be converted.}

\item{accurate_cn_bou}{logical, whether to convert the coordinates based on
accurate China boundary. Only effective when \code{api} is NULL (local mode). 
Default TRUE. The WGS-84 ==> GCJ-02 conversion will only be
conducted in coordinates inside China. When using the accurate China boundary,
the function will check if the coordinates are actually inside China's territory.
When set FALSE, the function will use a very vague rectangle to reprensent
China boundary.}
}
\value{
A 2-col data.frame ([lng, lat]) of transformed coordinates. Note that
points out of China will not have the coordinates converted.
}
\description{
There are three commonly seen coordinate systems: \itemize{
\item WGS-84 is the gloabal coordinate system, typcially collected by GPS. \cr
\item GCJ-02 is the coordinate system mandated by Chinese Gov't. \cr
\item BD-09 is the coordinates system developed by Baidu Inc. that encrypts 
 GCJ-02 further more.}
The functions in this family encrypts coordinates from 'WGS-84' to 'GCJ-02' 
and 'BD-09', and decrypts them back vice versa. The built-in algorithm called 
by these functions is open source and comes with absolutely no ganrantee.
}
\note{
Latitude is the horizontal line serving as y-axis metric, longitude is
the vertical line serving as x-axis metric.
}
\examples{
\dontrun{

## ========== wgs_to_gcj ==========

# Tiananmen square's WGS-84 coordinate is c(39.90734, 116.39089)
# http://www.google.cn/maps/place/Tiananmen,+Dongcheng,+Beijing/
# @39.90874,116.39713,16z?hl=en

## Single point
wgs_to_gcj(list(39.90734, 116.39089))  # or
wgs_to_gcj(39.90734, 116.39089)  # get
#           lat      lng
# [1,] 39.90874 116.3971

## Multiple points
### Coordinate pairs or Lat / Lon vectors
wgs_to_gcj(list(39.90734, 116.39089), list(39.90734, 116.39089))  # or
wgs_to_gcj(c(39.90734, 39.90734), c(116.39089, 116.39089))  # get
#           lat      lng
# [1,] 39.90874 116.3971
# [2,] 39.90874 116.3971

### Matrix
m <- matrix(c(39.90734, 116.39089, 39.90734, 116.39089, 39.90734, 
              116.39089), nrow=2)
m
#           [,1]      [,2]      [,3]
# [1,]  39.90734  39.90734  39.90734
# [2,] 116.39089 116.39089 116.39089

wgs_to_gcj(m)  # get
#           lat      lng
# [1,] 39.90874 116.3971
# [2,] 39.90874 116.3971
# [3,] 39.90874 116.3971

### data.frame
df <- data.frame(lat=c(39.90734, 39.90734, 39.90734, NA),
                 lon=c(116.39089, 116.39089, 116.39089, 116.39089))
wgs_to_gcj(df)  # get
#           lat      lng
# [1,] 39.90874 116.3971
# [2,] 39.90874 116.3971
# [3,] 39.90874 116.3971
# [4,]       NA       NA
}

\dontrun{

## ========== gcj_to_wgs ==========

# Tiananmen square's GCJ-02 coordinate is c(39.908746, 116.397131)
# http://www.openstreetmap.org/#map=19/39.90734/116.39089

## Single point
gcj_to_wgs(list(39.908746, 116.397131))  # or
gcj_to_wgs(39.908746, 116.397131)  # get
#           lat       lng
# [1,] 39.90734  116.3909

## Multiple points
### Coordinate pairs or lat / lon vectors
gcj_to_wgs(list(39.908746, 116.397131), list(39.908746, 116.397131))  # or
gcj_to_wgs(c(39.908746, 39.908746), c(116.397131, 116.397131))  # get
#           lat       lng
# [1,] 39.90734  116.3909
# [2,] 39.90734  116.3909

### Matrix
m <- matrix(c(39.908746, 116.397131, 39.908746, 116.397131, 39.908746, 
              116.397131), nrow=2)
m
#           [,1]       [,2]       [,3]
# [1,]  39.90875   39.90875   39.90875
# [2,] 116.39713  116.39713  116.39713
gcj_to_wgs(m)  # get
#           lat       lng
# [1,] 39.90734  116.3909
# [2,] 39.90734  116.3909
# [3,] 39.90734  116.3909

### data.frame
df <- data.frame(lat=c(39.908746, 39.908746, 39.908746, NA),
                 lon=c(116.397131, 116.397131, 116.397131, 116.397131))
gcj_to_wgs(df)  # get
#           lat       lng
# [1,] 39.90734  116.3909
# [2,] 39.90734  116.3909
# [3,] 39.90734  116.3909
# [4,]       NA        NA
}

\dontrun{

## ========== gcj_to_bd ==========

# Tiananmen square's GCJ-02 coordinate is c(39.908746, 116.397131)
#http://api.map.baidu.com/marker?location=39.91509,116.40350&title=Tiananmen&
 content=Tiananmen\%20square&output=html

## Single point
gcj_to_bd(list(39.908746, 116.397131))  # or
gcj_to_bd(39.908746, 116.397131)  # get
#           lat       lng
# [1,] 39.91509  116.4035

## Multiple points
### Coordiante pairs or lat / lon vectors
gcj_to_bd(list(39.908746, 116.397131), list(39.908746, 116.397131))  # or
gcj_to_bd(c(39.908746, 39.908746), c(116.397131, 116.397131))  # get
#           lat       lng
# [1,] 39.91509  116.4035
# [2,] 39.91509  116.4035

### Matrix
m <- matrix(c(39.908746, 116.397131, 39.908746, 116.397131, 39.908746, 
              116.397131), nrow=2)
m
#           [,1]       [,2]       [,3]
# [1,]  39.90875   39.90875   39.90875
# [2,] 116.39713  116.39713  116.39713
gcj_to_bd(m)  # get
#           lat       lng
# [1,] 39.91509  116.4035
# [2,] 39.91509  116.4035
# [3,] 39.91509  116.4035

### data.frame
df <- data.frame(lat=c(39.908746, 39.908746, 39.908746, NA),
                 lon=c(116.397131, 116.397131, 116.397131, 116.397131))
gcj_to_bd(df)  # get
#           lat       lng
# [1,] 39.91509  116.4035
# [2,] 39.91509  116.4035
# [3,] 39.91509  116.4035
# [4,]       NA        NA
}

\dontrun{

## ========== bd_to_gcj ==========

# Tiananmen square's BD-06 coordinate is c(39.91509, 116.40350)
# http://www.google.cn/maps/place/Tiananmen,+Dongcheng,+Beijing/
# @39.90875,116.39713,16z?hl=en

## Single point
bd_to_gcj(list(39.91509, 116.40350))  # or
bd_to_gcj(39.91509, 116.40350)  # get
#           lat       lng
# [1,] 39.90875  116.3971

## Multiple points
### coordinate pairs or lat / lon vectors
bd_to_gcj(list(39.91509, 116.40350), list(39.91509, 116.40350))  # or
bd_to_gcj(c(39.91509, 39.91509), c(116.40350, 116.40350))  # get
#           lat       lng
# [1,] 39.90875  116.3971
# [2,] 39.90875  116.3971

### Matrix
m <- matrix(c(39.91509, 116.40350, 39.91509, 116.40350, 39.91509, 
              116.40350), nrow=2)
m
#           [,1]       [,2]       [,3]
# [1,]  39.91509   39.91509   39.91509
# [2,] 116.40350  116.40350  116.40350
bd_to_gcj(m)  # get
#           lat       lng
# [1,] 39.90875  116.3971
# [2,] 39.90875  116.3971
# [3,] 39.90875  116.3971

### data.frame
df <- data.frame(lat=c(39.91509, 39.91509, 39.91509, NA),
                 lon=c(116.40350, 116.40350, 116.40350, 116.40350))
bd_to_gcj(df)  # get
#           lat       lng
# [1,] 39.90875  116.3971
# [2,] 39.90875  116.3971
# [3,] 39.90875  116.3971
# [4,]       NA        NA
}

\dontrun{

## ========== wgs_to_bd ==========

# Tiananmen square's WGS-84 coordinate is c(39.90734, 116.39089)
# http://api.map.baidu.com/marker?location=39.91509,116.40350&title=
# Tiananmen&content=Tiananmen\%20square&output=html

## Single point
wgs_to_bd(list(39.90734, 116.39089))  # or
wgs_to_bd(39.90734, 116.39089)  # get
#           lat       lng
# [1,] 39.91508  116.4035

## Multiple points
### Coordinate pairs or lat / lon vectors
wgs_to_bd(list(c(39.90734, 116.39089), c(39.90734, 116.39089)))  # or
wgs_to_bd(c(39.90734, 39.90734), c(116.39089, 116.39089))  # get
#           lat       lng
# [1,] 39.91508  116.4035
# [2,] 39.91508  116.4035

### Matrix
m <- matrix(c(39.90734, 116.39089, 39.90734, 116.39089, 39.90734, 
              116.39089), nrow=2)
m
#           [,1]       [,2]       [,3]
# [1,]  39.90734   39.90734   39.90734
# [2,] 116.39089  116.39089  116.39089
wgs_to_bd(m)  # get
#           lat       lng
# [1,] 39.91508  116.4035
# [2,] 39.91508  116.4035
# [3,] 39.91508  116.4035

### data.frame
df <- data.frame(lat=c(39.90734, 39.90734, 39.90734, NA),
                 lon=c(116.39089, 116.39089, 116.39089, 116.39089))
wgs_to_bd(df)  # get
#           lat       lng
# [1,] 39.91508  116.4035
# [2,] 39.91508  116.4035
# [3,] 39.91508  116.4035
# [4,]       NA        NA
}

\dontrun{

## ========== bd_to_wgs ==========

# Tiananmen square's BD-06 coordinate is c(39.91509, 116.40350)
# http://www.openstreetmap.org/#map=19/39.90734/116.39089

## Single point
bd_to_wgs(list(39.91509, 116.40350))  # or
bd_to_wgs(39.91509, 116.40350)  # get
#           lat       lng
# [1,] 39.90734  116.3909

## Multiple points
### Coordinate pairs or lat / lon vectors
bd_to_wgs(list(39.91509, 116.40350), list(39.91509, 116.40350))  # or
bd_to_wgs(c(39.91509, 39.91509), c(116.40350, 116.40350))  # get
#           lat       lng
# [1,] 39.90734  116.3909
# [2,] 39.90734  116.3909

### Matrix
m <- matrix(c(39.91509, 116.40350, 39.91509, 116.40350, 39.91509, 
              116.40350), nrow=2)
m
#           [,1]       [,2]       [,3]
# [1,]  39.90734   39.90734   39.90734
# [2,] 116.39089  116.39089  116.39089
bd_to_wgs(m)  # get
#           lat       lng
# [1,] 39.90734  116.3909
# [2,] 39.90734  116.3909
# [3,] 39.90734  116.3909

### data.frame
df <- data.frame(lat=c(39.91509, 39.91509, 39.91509, NA),
                 lon=c(116.40350, 116.40350, 116.40350, 116.40350))
bd_to_wgs(df)  # get
#           lat       lng
# [1,] 39.90734  116.3909
# [2,] 39.90734  116.3909
# [3,] 39.90734  116.3909
# [4,]       NA        NA
}

}
\references{
\url{https://on4wp7.codeplex.com/SourceControl/changeset/view/21483#353936}
}
\seealso{
\itemize{
 \item \code{\link{conv_coord}()} is a wrapper of these functions (local mode
  transforming functions) and \code{conv_coord_api} (api mode transforming 
  function). \cr
 \item \code{asesgeo:::get_cn_bou()}: a list of the 'accurate China boundary' 
  in 'WGS-84', 'GCJ-02' and 'BD-09', which are all \code{sp::SpatialPolygons} objects. \cr
 \item \code{\link{is_out_of_china}()}: how points are distinguished as in
  or out of China.
}
}
\author{
Yiying Wang, \email{wangy@aetna.com}
}
