% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cnmap.R
\name{cnmap}
\alias{cnmap}
\alias{cnmap0}
\alias{cnmap1}
\alias{cnmap2}
\alias{cnmap3}
\title{Load China Map on the Levels of Nation, Province, City or County}
\usage{
cnmap(level = c("nation", "province", "city", "county"),
  regions = NULL, simplify_level = 1, drop_fragment = FALSE,
  preserve_topo = c("all", "major", "none"), fragment_area = 0.003,
  output = c("spdf", "map", "df", "sf"))

cnmap0(regions = NULL, simplify_level = 1, drop_fragment = FALSE,
  preserve_topo = c("all", "major", "none"), fragment_area = 0.003,
  output = c("spdf", "map", "df", "sf"))

cnmap1(regions = NULL, simplify_level = 1, drop_fragment = FALSE,
  preserve_topo = c("all", "major", "none"), fragment_area = 0.003,
  output = c("spdf", "map", "df", "sf"))

cnmap2(regions = NULL, simplify_level = 1, drop_fragment = FALSE,
  preserve_topo = c("all", "major", "none"), fragment_area = 0.003,
  output = c("spdf", "map", "df", "sf"))

cnmap3(regions = NULL, simplify_level = 1, drop_fragment = FALSE,
  preserve_topo = c("all", "major", "none"), fragment_area = 0.003,
  output = c("spdf", "map", "df", "sf"))
}
\arguments{
\item{level}{Character or integer, "nation" (0), "province" (1), "city" (2) or
"county" (3). Default 'nation'.}

\item{regions}{Character strings that fully/partially match ADCODE, NAME, 
NAME_LAB or NAME_EN fields. E.g., 'beijing' or '^110' to filter the map to 
Beijing area (case insensitive). It supports regular expression. Default NULL, 
indicating that all the regions will be shown.}

\item{simplify_level}{Numeric (0 ~ 1), the proportion of points to retain when
applying polygon simplification. See \pkg{rmapshaper}::\code{\link[rmapshaper]{ms_simplify}}.
If set 1, then the function will load maps with highest border precision (bigger
in size). It is useful to reduce the object size when drawing a city- or 
county-level map by 50\%-95\%. Default 1 (no simplification). \cr
Be careful to balance the trade-off of \code{simplify_level} and plot rendering.
The smaller \code{simplify_level} is, the longer it takes to simplify the polygons,
but the shorter it takes to render the plot.}

\item{drop_fragment}{Logical, whether drop small fragments in the map (typically
small islands). It is useful to reduce the object size by around 10\%. Default FALSE. 
\cr When trying to drop fragments, it will \enumerate{
  \item at least preserve the largest polygon within a single Polygon slot;
  \item at least preserve the largest polygon with duplicated ADCODE.
}}

\item{preserve_topo}{Character ("all", "major", "none"), indicating how to preserve 
the topology when applying polygon simplification algorithm (only effective when
 \code{simplify_level} < 1). It is highly recommended to set \code{preserve_topo} == 
 "all" or "major" to avoid unexpected deformation. Default "all".
\itemize{
  \item \strong{all}: preserve topology of all the polygons, i.e. each Polygons 
    slot and its subordinate Polygon slots are retained.
  \item \strong{major}: only preserve topology of the Polygons slot. Some of 
    the Polygon slots inside the Polygons may be lost.
  \item \strong{none}: do not try to preserve topology, i.e., some of the 
    Polygons and/or Polygon slots inside them will be lost.
}}

\item{fragment_area}{Numeric, the threshold area (in km^2) for "fragment" (only 
effective when \code{drop_fragment} = TRUE). It is not recommended to set this 
value too high. Default 0.003 (the size of the smallest county in China).}

\item{output}{Character, "spdf", "map", "df", "sf". Default "spdf" 
(\code{sp::SpatialPolygonsDataFrame}).}
}
\value{
By default, an \pkg{sp}::\code{\link[sp]{SpatialPolygonsDataFrame}} 
object (\code{output} == "spdf"). You can further process it by \describe{
 \item{convert to a \pkg{maps}::\code{\link[maps]{map}} object}{
   \pkg{maps}::\code{\link[maps]{SpatialPolygons2map}()}}
 \item{convert to a data.frame}{\pkg{ggplot2}::\code{\link[ggplot2]{fortify}()}}
 \item{convert to an \code{sf} object}{\pkg{sf}::\code{\link{st_as_sf}()}}
}
}
\description{
Load the China map and do tiny modifications. Unlike the China map in packages 
\pkg{maps} and \pkg{mapdata}, the dataset in this package is based on Chinese 
official data. \code{cnmap0}, \code{cnmap1}, \code{cnmap2}, \code{cnmap3}
are convenient wrappers for \code{level} 0 (nation), 1 (province), 2 (city/prefecture), 
3 (county) respectively. \cr
\figure{cnmap.png} \figure{bjmap.png}
}
\note{
\describe{
 \item{Direct vs indirect loading}{You can also directly load the map datasets 
  using \code{data(cnmap0)}, \code{data(cnmap1)}, \code{data(cnmap2)}, or \code{data(cnmap3)}.
  But it is more recommended to call \code{cnmap}() to enjoy the benefits by 
  its default settings. }
 \item{Map meta data & encoding}{Suppose you call \code{cn0 <- data(cnmap0)}, 
  the data set will show in .GlobalEnv. You can then check its meta data by 
  \code{cn0@data} (cn0, as a SpatialPolygonsDataFrame object, is of S4 class) 
  or \code{slot(cn0, "data")}. 
  If you have issues with the character encoding, then try to switch to a Chinese 
  locale (\code{Sys.setlocale("LC_CTYPE", "Chs")}). \cr \cr 
  Some key fields in map meta dataset: \itemize{
    \item \strong{ADCODE}: The six-digit official administrative code
    \item \strong{NAME}: Full name of the administrative area
    \item \strong{NAME_LAB}: Short name of the administrative area
    \item \strong{NAME_EN}: English name of the administrative area
  }}
\item{Coordinate reference system}{
  The embeded map datasets are applying WGS84 coordinate system. You can define 
  your own coordinate reference system when plotting a map. China's official 
  recommendations:  \itemize{
  \item \pkg{maps}::\code{\link{map}}() or \pkg{ggplot2}::\code{\link[ggplot2]{coord_map}}:
    set it with \pkg{mapproj}::\code{\link{mapproject}()} \itemize{
      \item smaller maps: \code{projection="albers", parameters = c(24, 47)}
      \item larger maps: \code{projection="azequalarea", orientation = c(30, 105, 0)}
    }
  \item \pkg{ggplot2}::\code{\link[ggplot2]{coord_sf}}: set it using CRS
    \itemize{
      \item smaller maps: \code{coord_sf(crs="+init=epsg:4490 +proj=aea 
        +ellps=krass +lon_0=105 +lat_1=25 +lat_2=47")}
      \item larger maps: \code{coord_sf(crs="+init=epsg:4490 +proj=laea 
        +ellps=GRS80 +lon_0=105 +lat_0=30")}
    }
  }}
}
}
\examples{
\dontrun{
# to yield the 3-level China map as shown on the top
library(maps)
op <- par(mar=c(0, 0, 0, 0))
map(cnmap(3), col="gray90", lwd=0.2, projection="albers", 
  parameters = c(24, 47))  # cnmap(3) is equal to cnmap3()
map(cnmap(2), col="gray75", lwd=0.5, add=TRUE, projection="albers", 
  parameters = c(24, 47))
map(cnmap(1), col="gray30", lwd=0.8, add=TRUE, projection="albers", 
  parameters = c(24, 47))
map(cnmap(0), col="black", lwd=1, add=TRUE, projection="albers", 
  parameters = c(24, 47))
par(op) 

# to draw the 2-level Beijing map as shown on the top
library(ggplot2)
library(sf)
library(extrafont)
bjmap2 <- st_as_sf(cnmap(2, "^110", simplify_level=0.5))
bjmap3 <- st_as_sf(cnmap(3, "^110", simplify_level=0.5))
ggplot() + 
  geom_sf(data=bjmap3, color="gray50", size=0.5) +
  geom_sf(data=bjmap2, fill="transparent", color="gray5", size=0.8) +
  geom_sf_text(aes(label=NAME_LAB), data=bjmap3, family="Microsoft YaHei") +
  coord_sf(crs="+init=epsg:4490 +proj=laea +ellps=GRS80 
           +lon_0=105 +lat_0=30") +theme_minimal()
}
}
\seealso{
\itemize{
  \item check the vignettes: \code{vignette("drawChinaMap", package="asesgeo")}
  \item other useful functions: \code{\link[rmapshaper]{ms_simplify}}, 
     \code{\link[rmapshaper]{ms_dissolve}}, \code{\link[sp]{SpatialPolygonsDataFrame}}
}
}
