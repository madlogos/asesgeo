% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/revgeocode.R
\name{revgeocode}
\alias{revgeocode}
\title{Reverse geocode}
\usage{
revgeocode(latlng, ics = c("WGS-84", "GCJ-02", "BD-09"),
  output = c("address", "addressc", "all", "raw"), api = c("google",
  "baidu", "gaode"), messaging = FALSE, time = 0, use_curl = TRUE,
  key = NULL, auto_fix_latlng = TRUE, ...)
}
\arguments{
\item{latlng}{a location in latitude/longitude format, either a vector, list, 
matrix or a data.frame. The function will automatically identify the inputs 
and convert it to a data.frame [lat, lng] to proceed on. \describe{
 \item{vector: only extract the first two elements}{
    c(30, 100, ...) ==> data.frame(lat=30, lon=100)}
 \item{matrix: automatically identify the structure}{
    matrix(c(30, 20, 40, 100, 110, 90), ncol=2) ==> data.frame(lat=c(30, 20, 40), 
    lon=c(100, 110, 90))}
 \item{list: the lat and lon vectors are nested inside the list}{
   list(c(30, 20, 40), c(100, 110, 90)) ==> data.frame(lat=c(30, 20, 40), 
   lon=c(100, 110, 90))}
 \item{data.frame: only extract the first two columns}{
   data.frame(v1=c(30, 20), v2=c(100, 110), v3=...)  ==> data.frame(lat=c(30, 20), 
   lon=c(100, 110))}
}}

\item{ics}{the coordinate system of inputing location, including 'WGS-84', 'GCJ-02'
and 'BD-09', which are the GCSs of Google Earth, Google Map in China and Baidu
Map, respectively. For location out of China, ics is automatically set to 'WGS-84'
and other values are ignored.}

\item{output}{character, either 'address', 'addressc', 'all' or 'raw'. 
Default 'address'. \itemize{
  \item 'address': formatted address \cr
  \item 'addressc': formmatted address with address components \cr
  \item 'all': all information \cr
  \item 'raw': return the raw data parsed from JSON by \code{\link[jsonlite]{fromJSON}()}.
 You will then need to parse the data on your own.
}}

\item{api}{use 'google', 'baidu' or 'gaode' maps api}

\item{messaging}{turn messaging on/off. The default value is FALSE.}

\item{time}{the time interval to revgeocode, in seconds. Default value is zero.
When you revgeocode multiple locations, set a proper time interval to avoid
exceeding usage limits. For details see
\url{https://developers.google.com/maps/premium/usage-limits}}

\item{use_curl}{logical, whether use \code{curl} (TRUE) or \code{url} (FALSE)
to create the connection when calling the APIs. Default TRUE. The avialability 
of \code{curl} dependes on your network conditions.}

\item{key}{an api key must be provided when calling the Maps APIs. 
Default NULL, which indicates that the function will search for cache. If no
match is found, a GUI wizard will be launched to enter the api key. If the API
does not call for a key, set it to NA.}

\item{auto_fix_latlng}{logical, if the latlng data is of the opposite order,
whether to let the function automatically fix it. Default TRUE.}

\item{...}{other arguments to pass to the function, dependent on \code{api}. 
\describe{
 \item{\code{api} == 'google'}{\itemize{
  \item \code{client} and \code{signature} instead of \code{key} for higher security 
    (if you have a premium account) \cr
  \item \code{language} the language in which to return results, the supported
   languages refers to \url{https://developers.google.com/maps/faq#languagesupport} \cr
  \item \code{result_type} a filter of one or moree address types (separated by
   a pipe '|'), e.g., 'country|political'. \cr
  \item \code{location_type} a filter of one or moree address types (separated by
   a pipe '|'), e.g., 'ROOFTOP|APPROXIMATE'. \cr
  \item \code{name_type}: either 'long' or 'short' indicating long_name or 
    short_name is returned. Default 'long'.
 }}
 \item{\code{api} == 'baidu'}{\itemize{
  \item \code{pois}: 1 or 0. whether callback surrounding pois (1=Yes, 0=No). 
   You will need to apply for special service access when calling pois outside 
   China. \cr
  \item \code{radius}: the radius for calling back pois. 0-1000 (m). \cr
  \item \code{extensions_road}: callback 3 streets near the spot when set to 
   \code{TRUE}. \cr
  \item \code{extensions_town}: callback info of town when set to \code{TRUE}. \cr
  \item \code{language}: 'local' or short-form of languages, e.g., 'en', 'zh-CN'.
   You will need to apply for special service access when using multi-language
   functionality. \cr
  \item \code{langauge_auto}: whether auto fill the admin area (1=Yes, 0=No).
   You will need to apply for special service access when using multi-language
   functionality. \cr
  \item \code{latest_admin}: whether get the latest administrative area info 
   (1=Yes, 0=No).
 }}
 \item{\code{api} == 'gaode'}{\itemize{
  \item \code{extensions}: return basic info ('base') or base+additional info ('all'). 
   When \code{extensions='all'}, some more parameters will take effect: 
   \itemize{
    \item \code{poitype}: one or more POI type codes (separated by a pipe '|').
     The valid POI type codes refers to \url{https://lbs.amap.com/api/webservice/download}. 
     It will not take effect when applying batch mode (multiple \code{latlng}s are provided). \cr
    \item \code{radius}: the radius for calling back pois. 0-3000 (m). \cr
    \item \code{roadlevel}: return all the roads (0) or main roads only (1) \cr
    \item \code{homeorcorp}: order the callback pois, \itemize{
      \item 0: do not intervene the order of the pois. \cr
      \item 1: home-related pois are prioritized. \cr
      \item 2: coorporate-related pois are prioritized.
     }
  }
 }}
}}
}
\value{
a data.frame with variables address or detail address components
}
\description{
Reverse geocodes a lat/lng location using Google or Baidu Maps API.  Note that in most cases by
using this function you are agreeing to the Google Maps API Terms of Service
at \url{https://cloud.google.com/maps-platform/terms/}, the Baidu Maps API Terms
of Use at \url{http://lbsyun.baidu.com/index.php?title=open/question} or the 
Gaode Maps API Terms of Use at \url{https://lbs.amap.com/faq/top/notice}. \cr
Note that geocoding service may cause charges. Take care of our app key and 
check the quota carefully.
}
\examples{
\dontrun{
set_api_key(c("googlemap", "baidumap", "gaodemap"), 
            c(<GOOGLE MAPS API KEY>, <BAIDU MAPS API KEY>,
              <GAODE MAPS API KEY>))

# reverse geocode Beijing railway station
revgeocode(c(39.90105, 116.42079), ics = 'WGS-84', output = 'address', 
           api = 'google')
revgeocode(c(39.90245, 116.42703), ics = 'GCJ-02', output = 'address', 
           api = 'google', messaging = TRUE)
revgeocode(c(39.90851, 116.43351), ics = 'BD-09', output = 'addressc', 
           api = 'google',)
revgeocode(c(39.90851, 116.43351), ics = 'BD-09', output = 'address',
           api = 'baidu')
revgeocode(c(39.90245, 116.42703), ics = 'GCJ-02', output = 'address', 
           api = 'baidu',messaging = TRUE)
revgeocode(c(39.90105, 116.42079), ics = 'WGS-84', output = 'addressc',
           api = 'baidu')

# reverse geocode multiple locations
latlng = data.frame(lat = c(39.99837, 39.98565), 
                    lng = c(116.3203, 116.2998))
revgeocode(latlng, ics = 'WGS-84', output = 'all', api = 'google')
revgeocode(latlng, ics = 'WGS-84', output = 'all', api = 'google', 
           time = 2)
}
}
\references{
\itemize{
 \item Google Maps API at 
   \url{https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding} \cr
 \item Baidu Maps API at 
   \url{http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding} \cr
 \item Gaode Map API at 
   \url{https://lbs.amap.com/api/webservice/guide/api/georegeo}
}
}
\seealso{
\code{\link{geocode}()}, \code{\link{set_api_key}()}, \code{\link{geohost}()}. \cr
 Refer to \code{\link{transform_coord}} function family to read the details about
 argument \code{y}, which is consistent with \code{latlng}. \cr
 \code{\link{synthesize_googlemap_api}()}, \code{\link{synthesize_baidumap_api}()},
 \code{\link{synthesize_gaodemap_api}()}
}
\author{
\itemize{
 \item Create: Jun Cai (\email{cai-j12@mails.tsinghua.edu.cn}), PhD student from
   Center for Earth System Science, Tsinghua University \cr
 \item Update: Yiying Wang (\email{wangy@aetna.com})
}
}
