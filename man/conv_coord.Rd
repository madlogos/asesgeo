% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conv_coord.R
\name{convCoord}
\alias{convCoord}
\alias{conv_coord}
\title{Generic function to convert geographic coordinates}
\usage{
convCoord(lat, lon, from = c("WGS-84", "GCJ-02", "BD-09"),
  to = c("WGS-84", "GCJ-02", "BD-09"), output = c("all", "raw"),
  api = NULL, force = FALSE, accurate_cn_bou = TRUE, key = NULL,
  time = 0, idf = TRUE, messaging = FALSE, ...)
}
\arguments{
\item{lat}{numeric vector, the latitudes}

\item{lon}{numeric vector, the longitudes}

\item{from}{character, the inputting GCS, "WGS-84", "GCJ-02", or "BD-09"}

\item{to}{character, the outputting GCS, "WGS-84", "GCJ-02", or "BD-09"}

\item{output}{character, the output format, "all" or "raw". Default "all".
\itemize{
 \item 'all": the structured data.frame of results comprising of 'lat' and 'lng'. \cr
 \item 'raw': the raw JSON data. You can then parse the results using 
   \code{\link{parse_convcoords}()}. It is only effective when setting a specific
   \code{api} (api mode conversion).
}}

\item{api}{character, call 'baidu' or 'gaode' maps api. Note that baidu API only supports 
the transformations from WGS-84 or GCJ-02 to BD-09, and gaode API only supports
the tranformations from WGS-84 or BD-09 to GCJ-02. Other coodinate conversions
must be done locally. As the conversion result is the same, it's recommended
to perform conversions locally. Default NULL, indicating that local algorithm
is applied.}

\item{force}{logical, whether convert the coordinates regardless if they
locate inside China. Default FALSE, indicating that only coordinates inside China
will be converted. It is only effective when \code{api} is NULL (local mode).}

\item{accurate_cn_bou}{logical, whether use accurate China boundary to convert
the coordinates. It is only effective when \code{api} is NULL (local mode). 
Default TRUE. The WGS-84 ==> GCJ-02 conversion will only be
conducted in coordinates inside China. When using the accurate China boundary,
the function will check if the coordinates are actually inside China's territory.
When set FALSE, the function will use a very vague rectangle to reprensent
China boundary.}

\item{key}{character. When \code{api} is TRUE, a web api will be called.
The key is thus mandatory. If key is not properly provided, the api
will report errors. Default NULL, which indicates that \code{\link{get_api_key}()}
will be called to set the api key.}

\item{time}{numeric, time interval when calling the APIs. This is used to avoid
the overuse. Default 0.}

\item{idf}{logical, whether add an identifier column to the result. Default 
TRUE.}

\item{messaging}{logical, whether print message during processing. Default FALSE.}

\item{...}{other arguments to pass to the function.}
}
\value{
a 2-col data.frame ([lng, lat]) of transformed coordinates.
}
\description{
The general function that converts lat/lon coordintes from one GCS to another
GCS including WGS-84, GCJ-02 and BD-09 either locally or by calling Baidu
Maps API.
}
\details{
The original function turns on \code{api}, which calls Google or Baidu APIs and
may thus be slow. This version by default turns off \code{api} and applies 
built-in conversion functions to do the trick and thus performs faster. \cr
Note that the APIs have usage limits (baidu: 100 lat/lon coordinates per query,
gaode: 40 lon/lat coordinates per query). \cr
Since the results of coordinate conversion using API method and local algorithms
are basically the same, it is recommended to use local algorithms. \cr
}
\examples{
\dontrun{
# latitude/longitude coordinates of Beijing railway station
## WGS-84: (39.90105, 116.42079)
## GCJ-02: (39.90245, 116.42703)
## BD-09:  (39.90851, 116.43351)
ak <- <Your baidu map api key>
conv_coord(39.90105, 116.42079, from='WGS-84', to='GCJ-02')
conv_coord(39.90105, 116.42079, from='WGS-84', to='GCJ-02', api='baidu', 
           key=ak)
conv_coord(39.90105, 116.42079, from='WGS-84', to='BD-09')
conv_coord(39.90105, 116.42079, from='WGS-84', to='BD-09', api='baidu', 
           key=ak)
conv_coord(39.90245, 116.42703, from='GCJ-02', to='WGS-84')

# not supported by baidu or gaode map api, return NAs
conv_coord(39.90245, 116.42703, from='GCJ-02', to='WGS-84', api='baidu', 
           key=ak)
conv_coord(39.90245, 116.42703, from='GCJ-02', to='BD-09')
conv_coord(39.90245, 116.42703, from='GCJ-02', to='BD-09', api='baidu', 
           key=ak)
conv_coord(39.90851, 116.43351, from='BD-09', to='GCJ-02')

# not supported by baidu or gaode map api, return NAs
conv_coord(39.90851, 116.43351, from='BD-09', to='GCJ-02', api='baidu', 
           key=ak)
conv_coord(39.90851, 116.43351, from='BD-09', to='WGS-84')

# not supported by baidu or gaode map api, return NAs
conv_coord(39.90851, 116.43351, from='BD-09', to='WGS-84', api='baidu', 
           key=ak)

# convert multiple coordinates
lat <- c(39.99837, 39.98565)
lng <- c(116.3203, 116.2998)
conv_coord(lat, lng, from='WGS-84', to='GCJ-02')
}
}
\references{
Baidu web API for coordinate conversion at
\url{http://lbsyun.baidu.com/index.php?title=webapi/guide/changeposition} \cr
Gaode web API for coordinate conversion at 
\url{https://lbs.amap.com/api/webservice/guide/api/convert}
}
\seealso{
\itemize{
\item local transforming functions: \code{\link{wgs_to_gcj}()}, \code{\link{gcj_to_bd}()},
  \code{\link{gcj_to_wgs}()}, \code{\link{wgs_to_bd}()}, \code{\link{bd_to_wgs}()}, 
  \code{\link{bd_to_gcj}()} and \code{\link{get_api_key}()}. \cr
\item \code{asesgeo:::get_cn_bou}(): a list of the 'accurate China boundary' in
  'WGS-84', 'GCJ-02' and 'BD-09', which are all \code{sp::SpatialPolygons} objects. \cr
\item \code{\link{is_out_of_china}()}: see how points aer distinguished as in
  or out of China.
}
}
\author{
Jun Cai (\email{cai-j12@mails.tsinghua.edu.cn}), PhD student from
Center for Earth System Science, Tsinghua University \cr
Yiying Wang (\email{wangy@aetna.com})
}
